@model IEnumerable<TaskManagment.ViewModels.TaskViewModel>
<style>
    .accordion {
        background-color: #eee;
        color: #444;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
        transition: 0.4s;
    }

        .active, .accordion:hover {
            background-color: #ccc;
        }

        .accordion:after {
            content: '\002B';
            color: #777;
            font-weight: bold;
            float: right;
            margin-left: 5px;
        }

    .active:after {
        content: "\2212";
    }

    .panel {
        padding: 0 18px;
        background-color: white;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.2s ease-out;
    }
</style>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TaskStatusID)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.UserID)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.AssignedUserID)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.File)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ParentComment)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Description)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.TaskStatus.Status)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.User.UserName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.AssignedUser.UserName)
        </td>
        <td>
            
            @if (item.File != null)
            {
                @Html.ActionLink(item.File, "DownloadFile", new { id = item.ID })
            }

        </td>
        <td>

            <button class="accordion">
                @Html.DisplayFor(modelItem => item.ParentComment.CommentDescription)
            </button>

            <div class="panel">
                @foreach (var child in item.ChildComments)
                {
                    <p>
                        @Html.DisplayFor(modelItem => child.CommentDescription)
                    </p>
                    <input type="text" name="newComment" id="newComment-@child.ID" placeholder="reply...">
                    <button id="sendBtn" onclick="addComment('@child.TaskID','@child.ID')">Send</button>

                }
            </div>

        </td>
        <td>
            @Html.ActionLink("Edit", "Create", new { id = item.ID }) |

            @Html.ActionLink("Delete", "Delete", new { id = item.ID }) |

            @if (item.TaskStatus.Status != "Closed")
            {
                @Html.ActionLink("Close", "Close", new { id = item.ID })
            }
            else
            {
                <p> Closed</p>
            }

        </td>
    </tr>
    }

</table>

<script src="/Scripts/jquery-3.3.1.js"></script>
<script src="/Scripts/jquery.validate.js"></script>
<script src="/Scripts/jquery.validate.unobtrusive.js"></script>
<script>
    var acc = document.getElementsByClassName("accordion");
    var i;

    for (i = 0; i < acc.length; i++) {
        acc[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var panel = this.nextElementSibling;
            if (panel.style.maxHeight) {
                panel.style.maxHeight = null;
            } else {
                panel.style.maxHeight = panel.scrollHeight + "px";
            }
        });
    }

    function addComment(TaskID, ParentID) {
        var comment = "newComment-" + ParentID
        var CommentDescription = document.getElementById(comment).value;
        var ParentID = ParentID;
        var TaskID = TaskID;

        var CommentObj =
        {
            CommentDescription : CommentDescription,
            ParentID: ParentID,
            TaskID: TaskID
        }
        console.log(CommentObj)
        SendAjaxRequest(CommentObj)

    }

    function SendAjaxRequest(CommentObj) {
        //$.post(URL, data, function (data, status, xhr), dataType)
        console.log(CommentObj)
        //$.ajax({
        //    url: '/Tasks/AddComment',
        //    contentType: 'application/json; charset=utf-8',
        //    data: CommentObj,
        //    type: 'POST',
        //    dataType: 'json'

        //})
        //    .success(function (result) {
        //        console.log(result)
        //    })
        //    .error(function (xhr, status) {
        //        alert(status);
        //    })

        $.ajax({
            url: '/Tasks/AddComment',
            type: "POST",
            contentType: "application/json",
            dataType: "json",
            data: JSON.stringify(CommentObj),

            success: function (result) {
                console.log(result);
            },

            error: function (xhr, resp, text) {
                console.log(xhr, resp, text);
            }
        });

    }


</script>